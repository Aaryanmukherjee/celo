"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestTxSig = exports.requestAccountAddress = exports.waitForSignedTxs = exports.waitForAccountAuth = exports.parseURLOnRender = exports.FeeCurrency = exports.SignTxRequest = exports.serializeDappKitRequestDeeplink = exports.AccountAuthRequest = void 0;
var utils_1 = require("@celo/utils");
var common_1 = require("./common");
var utils_2 = require("@celo/utils");
Object.defineProperty(exports, "AccountAuthRequest", { enumerable: true, get: function () { return utils_2.AccountAuthRequest; } });
Object.defineProperty(exports, "serializeDappKitRequestDeeplink", { enumerable: true, get: function () { return utils_2.serializeDappKitRequestDeeplink; } });
Object.defineProperty(exports, "SignTxRequest", { enumerable: true, get: function () { return utils_2.SignTxRequest; } });
// TODO: causes warnings for webpack/babel/expo, once prettier is upgraded use:
// export type { TxParams } from './common'
var common_2 = require("./common");
Object.defineProperty(exports, "FeeCurrency", { enumerable: true, get: function () { return common_2.FeeCurrency; } });
// DappKit Web constants and helpers
var localStorageKey = 'dappkit-web';
// Ensure this is called on dappkit import
parseURLOnRender();
// hack to get around dappkit issue where new tabs are opened
// and the url hash state is not respected (Note this implementation
// of dappkit doesn't use URL hashes to always force the newtab experience).
// Function that should be called within dapp wherever a window is rendered
function parseURLOnRender() {
    if (typeof window !== 'undefined') {
        var params = new URL(window.location.href).searchParams;
        if (params.get('type') && params.get('requestId')) {
            // Prevents error when reloading a chrome page with params in the URL
            if (localStorage) {
                localStorage.setItem(localStorageKey, window.location.href);
                // TODO: seems like the below line is not getting executed in Chrome on iOS
                // on iOS though, the newly opened window gets closed and the following window (instead of the previously opened tab) gets opened
                window.close();
            }
        }
    }
}
exports.parseURLOnRender = parseURLOnRender;
function waitForResponse(timeout) {
    return __awaiter(this, void 0, void 0, function () {
        var pollInterval, endTime, value;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pollInterval = 100;
                    endTime = Date.now() + timeout;
                    _a.label = 1;
                case 1:
                    if (!(Date.now() < endTime)) return [3 /*break*/, 3];
                    value = localStorage.getItem(localStorageKey);
                    if (value) {
                        localStorage.removeItem(localStorageKey);
                        return [2 /*return*/, value];
                    }
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, pollInterval); })];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: throw new Error('Timeout waiting for Valora response');
            }
        });
    });
}
function waitDecorator(requestId, checkCallback, timeout) {
    if (timeout === void 0) { timeout = 15000; }
    return __awaiter(this, void 0, void 0, function () {
        var url, dappKitResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, waitForResponse(timeout)];
                case 1:
                    url = _a.sent();
                    dappKitResponse = (0, utils_1.parseDappkitResponseDeeplink)(url);
                    if (checkCallback(requestId, dappKitResponse)) {
                        return [2 /*return*/, dappKitResponse];
                    }
                    throw new Error('Unable to parse Valora response');
            }
        });
    });
}
function waitForAccountAuth(requestId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, waitDecorator(requestId, common_1.checkAccountAuth)];
        });
    });
}
exports.waitForAccountAuth = waitForAccountAuth;
function waitForSignedTxs(requestId) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, waitDecorator(requestId, common_1.checkSignedTxs)];
        });
    });
}
exports.waitForSignedTxs = waitForSignedTxs;
function requestAccountAddress(meta) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, common_1.requestAccountAddressFactory)(meta, openURL)];
        });
    });
}
exports.requestAccountAddress = requestAccountAddress;
function requestTxSig(kit, txParams, meta) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, common_1.requestTxSigFactory)(kit, txParams, meta, openURL)];
        });
    });
}
exports.requestTxSig = requestTxSig;
function openURL(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            window.location.href = url;
            return [2 /*return*/];
        });
    });
}
//# sourceMappingURL=web.js.map