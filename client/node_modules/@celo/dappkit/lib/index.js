"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestTxSig = exports.requestAccountAddress = exports.waitForSignedTxs = exports.waitForAccountAuth = exports.listenToSignedTxs = exports.listenToAccount = exports.FeeCurrency = exports.SignTxRequest = exports.serializeDappKitRequestDeeplink = exports.AccountAuthRequest = void 0;
var utils_1 = require("@celo/utils");
var react_native_1 = require("react-native");
var common_1 = require("./common");
var utils_2 = require("@celo/utils");
Object.defineProperty(exports, "AccountAuthRequest", { enumerable: true, get: function () { return utils_2.AccountAuthRequest; } });
Object.defineProperty(exports, "serializeDappKitRequestDeeplink", { enumerable: true, get: function () { return utils_2.serializeDappKitRequestDeeplink; } });
Object.defineProperty(exports, "SignTxRequest", { enumerable: true, get: function () { return utils_2.SignTxRequest; } });
// TODO: causes warnings for webpack/babel/expo, once prettier is upgraded use:
// export type { TxParams } from './common'
var common_2 = require("./common");
Object.defineProperty(exports, "FeeCurrency", { enumerable: true, get: function () { return common_2.FeeCurrency; } });
function listenToAccount(callback) {
    return react_native_1.Linking.addEventListener('url', function (_a) {
        var url = _a.url;
        try {
            var dappKitResponse = (0, utils_1.parseDappkitResponseDeeplink)(url);
            if (dappKitResponse.type === utils_1.DappKitRequestTypes.ACCOUNT_ADDRESS &&
                dappKitResponse.status === utils_1.DappKitResponseStatus.SUCCESS) {
                callback(dappKitResponse.address);
            }
        }
        catch (error) { }
    });
}
exports.listenToAccount = listenToAccount;
function listenToSignedTxs(callback) {
    return react_native_1.Linking.addEventListener('url', function (_a) {
        var url = _a.url;
        try {
            var dappKitResponse = (0, utils_1.parseDappkitResponseDeeplink)(url);
            if (dappKitResponse.type === utils_1.DappKitRequestTypes.SIGN_TX &&
                dappKitResponse.status === utils_1.DappKitResponseStatus.SUCCESS) {
                callback(dappKitResponse.rawTxs);
            }
        }
        catch (error) { }
    });
}
exports.listenToSignedTxs = listenToSignedTxs;
function waitDecorator(requestId, checkCallback) {
    return new Promise(function (resolve, reject) {
        var handler = function (_a) {
            var url = _a.url;
            try {
                var dappKitResponse = (0, utils_1.parseDappkitResponseDeeplink)(url);
                if (checkCallback(requestId, dappKitResponse)) {
                    react_native_1.Linking.removeEventListener('url', handler);
                    resolve(dappKitResponse);
                }
            }
            catch (error) {
                reject(error);
            }
        };
        react_native_1.Linking.addEventListener('url', handler);
    });
}
function waitForAccountAuth(requestId) {
    return waitDecorator(requestId, common_1.checkAccountAuth);
}
exports.waitForAccountAuth = waitForAccountAuth;
function waitForSignedTxs(requestId) {
    return waitDecorator(requestId, common_1.checkSignedTxs);
}
exports.waitForSignedTxs = waitForSignedTxs;
function requestAccountAddress(meta) {
    (0, common_1.requestAccountAddressFactory)(meta, openURLOrAppStore);
}
exports.requestAccountAddress = requestAccountAddress;
function requestTxSig(kit, txParams, meta) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, (0, common_1.requestTxSigFactory)(kit, txParams, meta, openURLOrAppStore)];
        });
    });
}
exports.requestTxSig = requestTxSig;
// Function to wrap Linking.openURL to try to redirect to App Store if app isn't downloaded
function openURLOrAppStore(url) {
    return __awaiter(this, void 0, void 0, function () {
        var openAppStore, error_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    openAppStore = function () { return __awaiter(_this, void 0, void 0, function () {
                        var storeURL;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    switch (react_native_1.Platform.OS) {
                                        case 'ios': {
                                            storeURL = common_1.IOS_STORE_URL;
                                            break;
                                        }
                                        case 'android': {
                                            storeURL = common_1.ANDROID_STORE_URL;
                                            break;
                                        }
                                        default: {
                                            storeURL = common_1.VALORA_APP_URL;
                                            break;
                                        }
                                    }
                                    return [4 /*yield*/, react_native_1.Linking.openURL(storeURL)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 5]);
                    return [4 /*yield*/, react_native_1.Linking.openURL(url)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3:
                    error_1 = _a.sent();
                    console.error(error_1);
                    return [4 /*yield*/, openAppStore()
                        // Allow DApp developer to handle broken flow
                    ];
                case 4:
                    _a.sent();
                    // Allow DApp developer to handle broken flow
                    throw Error('Error opening deeplink: App likely not installed');
                case 5: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=index.js.map