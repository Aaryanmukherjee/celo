{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/raunakmukherjee/Documents/Raunak_main/UMich/BAM/box/client/App.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport \"./global\";\nimport { web3, kit } from \"./root\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { Home } from \"./components/Home\";\nimport { Market } from \"./components/Market\";\nimport { requestTxSig, waitForSignedTxs, requestAccountAddress, waitForAccountAuth, FeeCurrency } from '@celo/dappkit';\nimport { toTxResult } from \"@celo/connect\";\nimport * as Linking from 'expo-linking';\nimport HelloWorldContract from \"./contracts/HelloWorld.json\";\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream']);\nexport var App = function App() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      borrow = _useState2[0],\n      setBorrow = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      supply = _useState4[0],\n      setSupply = _useState4[1];\n\n  state = {\n    address: 'Not logged in',\n    phoneNumber: 'Not logged in',\n    cUSDBalance: 'Not logged in',\n    helloWorldContract: {},\n    contractName: '',\n    textInput: ''\n  };\n\n  componentDidMount = function componentDidMount() {\n    var networkId, deployedNetwork, instance;\n    return _regeneratorRuntime.async(function componentDidMount$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(web3.eth.net.getId());\n\n          case 2:\n            networkId = _context.sent;\n            deployedNetwork = HelloWorldContract.networks[networkId];\n            instance = new web3.eth.Contract(HelloWorldContract.abi, deployedNetwork && deployedNetwork.address);\n\n            _this.setState({\n              helloWorldContract: instance\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  login = function login() {\n    var requestId, dappName, callback, dappkitResponse, stableToken, cUSDBalanceBig, ERC20_DECIMALS, cUSDBalanceDec, cUSDBalance;\n    return _regeneratorRuntime.async(function login$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            requestId = 'login';\n            dappName = 'Hello Celo';\n            callback = Linking.makeUrl('/my/path');\n            requestAccountAddress({\n              requestId: requestId,\n              dappName: dappName,\n              callback: callback\n            });\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(waitForAccountAuth(requestId));\n\n          case 6:\n            dappkitResponse = _context2.sent;\n            kit.defaultAccount = dappkitResponse.address;\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(kit.contracts.getStableToken());\n\n          case 10:\n            stableToken = _context2.sent;\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(stableToken.balanceOf(kit.defaultAccount));\n\n          case 13:\n            cUSDBalanceBig = _context2.sent;\n            ERC20_DECIMALS = 18;\n            cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n            cUSDBalance = cUSDBalanceDec.toString();\n\n            _this.setState({\n              cUSDBalance: cUSDBalance,\n              isLoadingBalance: false,\n              address: dappkitResponse.address,\n              phoneNumber: dappkitResponse.phoneNumber\n            });\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  read = function read() {\n    var name;\n    return _regeneratorRuntime.async(function read$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(_this.state.helloWorldContract.methods.getName().call());\n\n          case 2:\n            name = _context3.sent;\n\n            _this.setState({\n              contractName: name\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  write = function write() {\n    var requestId, dappName, callback, txObject, dappkitResponse, tx, result;\n    return _regeneratorRuntime.async(function write$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            requestId = 'update_name';\n            dappName = 'Hello Celo';\n            callback = Linking.makeUrl('/my/path');\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(_this.state.helloWorldContract.methods.setName(_this.state.textInput));\n\n          case 5:\n            txObject = _context4.sent;\n            requestTxSig(kit, [{\n              from: _this.state.address,\n              to: _this.state.helloWorldContract.options.address,\n              tx: txObject,\n              feeCurrency: FeeCurrency.cUSD\n            }], {\n              requestId: requestId,\n              dappName: dappName,\n              callback: callback\n            });\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(waitForSignedTxs(requestId));\n\n          case 9:\n            dappkitResponse = _context4.sent;\n            tx = dappkitResponse.rawTxs[0];\n            _context4.next = 13;\n            return _regeneratorRuntime.awrap(toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt());\n\n          case 13:\n            result = _context4.sent;\n            console.log(\"Hello World contract update transaction receipt: \", result);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  onChangeText = function onChangeText(text) {\n    return _regeneratorRuntime.async(function onChangeText$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _this.setState({\n              textInput: text\n            });\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), React.createElement(Market, {\n    label: \"Supply Markets\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    marginVertical: 8,\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/Users/raunakmukherjee/Documents/Raunak_main/UMich/BAM/box/client/App.js"],"names":["React","useState","useEffect","web3","kit","Home","Market","requestTxSig","waitForSignedTxs","requestAccountAddress","waitForAccountAuth","FeeCurrency","toTxResult","Linking","HelloWorldContract","YellowBox","ignoreWarnings","App","borrow","setBorrow","supply","setSupply","state","address","phoneNumber","cUSDBalance","helloWorldContract","contractName","textInput","componentDidMount","eth","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","setState","login","requestId","dappName","callback","makeUrl","dappkitResponse","defaultAccount","contracts","getStableToken","stableToken","balanceOf","cUSDBalanceBig","ERC20_DECIMALS","cUSDBalanceDec","shiftedBy","toFixed","toString","isLoadingBalance","read","methods","getName","call","name","write","setName","txObject","from","to","options","tx","feeCurrency","cUSD","rawTxs","sendSignedTransaction","waitReceipt","result","console","log","onChangeText","text","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","title","marginVertical","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nimport './global'\nimport { web3, kit } from './root'\nimport { Image, StyleSheet, Text, TextInput, Button, View, YellowBox } from 'react-native'\nimport {Home} from \"./components/Home\"\nimport {Market} from \"./components/Market\"\n\nimport {   \n  requestTxSig,\n  waitForSignedTxs,\n  requestAccountAddress,\n  waitForAccountAuth,\n  FeeCurrency\n} from '@celo/dappkit'\nimport { toTxResult } from \"@celo/connect\"\nimport * as Linking from 'expo-linking'\nimport HelloWorldContract from './contracts/HelloWorld.json'\n\n\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream'])\n\nexport const App = () => {\n  const [borrow, setBorrow] = useState(0)\n  const [supply, setSupply] = useState(0)\n\n  \n\n\n\n  // Set the defaults for the state\n  state = {\n    address: 'Not logged in',\n    phoneNumber: 'Not logged in',\n    cUSDBalance: 'Not logged in',\n    helloWorldContract: {},\n    contractName: '',\n    textInput: ''\n  }\n\n  // This function is called when the page successfully renders\n  componentDidMount = async () => {\n    \n    // Check the Celo network ID\n    const networkId = await web3.eth.net.getId();\n    \n    // Get the deployed HelloWorld contract info for the appropriate network ID\n    const deployedNetwork = HelloWorldContract.networks[networkId];\n\n    // Create a new contract instance with the HelloWorld contract info\n    const instance = new web3.eth.Contract(\n      HelloWorldContract.abi,\n      deployedNetwork && deployedNetwork.address\n    );\n\n    // Save the contract instance\n    this.setState({ helloWorldContract: instance })\n  }\n\n  login = async () => {\n    \n    // A string you can pass to DAppKit, that you can use to listen to the response for that request\n    const requestId = 'login'\n    \n    // A string that will be displayed to the user, indicating the DApp requesting access/signature\n    const dappName = 'Hello Celo'\n    \n    // The deeplink that the Celo Wallet will use to redirect the user back to the DApp with the appropriate payload.\n    const callback = Linking.makeUrl('/my/path')\n  \n    // Ask the Celo Alfajores Wallet for user info\n    requestAccountAddress({\n      requestId,\n      dappName,\n      callback,\n    })\n  \n    // Wait for the Celo Wallet response\n    const dappkitResponse = await waitForAccountAuth(requestId)\n\n    // Set the default account to the account returned from the wallet\n    kit.defaultAccount = dappkitResponse.address\n\n    // Get the stabel token contract\n    const stableToken = await kit.contracts.getStableToken()\n\n    // Get the user account balance (cUSD)\n    const cUSDBalanceBig = await stableToken.balanceOf(kit.defaultAccount)\n    \n    // Convert from a big number to a string by rounding it to the appropriate number of decimal places\n    const ERC20_DECIMALS = 18\n    let cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2)\n    let cUSDBalance = cUSDBalanceDec.toString()\n    \n    // Update state\n    this.setState({ cUSDBalance, \n                    isLoadingBalance: false,\n                    address: dappkitResponse.address, \n                    phoneNumber: dappkitResponse.phoneNumber })\n  }\n\n  read = async () => {\n    \n    // Read the name stored in the HelloWorld contract\n    let name = await this.state.helloWorldContract.methods.getName().call()\n    \n    // Update state\n    this.setState({ contractName: name })\n  }\n\n  write = async () => {\n    const requestId = 'update_name'\n    const dappName = 'Hello Celo'\n    const callback = Linking.makeUrl('/my/path')\n\n    // Create a transaction object to update the contract with the 'textInput'\n    const txObject = await this.state.helloWorldContract.methods.setName(this.state.textInput)\n\n    // Send a request to the Celo wallet to send an update transaction to the HelloWorld contract\n    requestTxSig(\n      kit,\n      [\n        {\n          from: this.state.address,\n          to: this.state.helloWorldContract.options.address,\n          tx: txObject,\n          feeCurrency: FeeCurrency.cUSD\n        }\n      ],\n      { requestId, dappName, callback }\n    )\n\n    // Get the response from the Celo wallet\n    const dappkitResponse = await waitForSignedTxs(requestId)\n    const tx = dappkitResponse.rawTxs[0]\n    \n    // Get the transaction result, once it has been included in the Celo blockchain\n    let result = await toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt()\n\n    console.log(`Hello World contract update transaction receipt: `, result)  \n  }\n\n  onChangeText = async (text) => {\n    this.setState({textInput: text})\n  }\n\n  \n    return (\n      <View style={styles.container}>\n        <Home></Home>\n        <Market label = \"Supply Markets\"/>\n\n        {/* <Image resizeMode='contain' source={require(\"./assets/white-wallet-rings.png\")}></Image>\n        <Text>Open up client/App.js to start working on your app!</Text>\n        \n        <Text style={styles.title}>Login first</Text> */}\n        {/* <Button title=\"login()\" \n          onPress={()=> this.login()} />\n                <Text style={styles.title}>Account Info:</Text>\n        <Text>Current Account Address:</Text>\n        <Text>{this.state.address}</Text>\n        <Text>Phone number: {this.state.phoneNumber}</Text>\n        <Text>cUSD Balance: {this.state.cUSDBalance}</Text>\n\n        <Text style={styles.title}>Read HelloWorld</Text>\n        <Button title=\"Read Contract Name\" \n          onPress={()=> this.read()} />\n        <Text>Contract Name: {this.state.contractName}</Text>\n        \n        <Text style={styles.title}>Write to HelloWorld</Text>\n        <Text>New contract name:</Text>\n        <TextInput\n          style={{  borderColor: 'black', borderWidth: 1, backgroundColor: 'white' }}\n          placeholder=\"input new name here\"\n          onChangeText={text => this.onChangeText(text)}\n          value={this.state.textInput}\n          />\n        <Button style={{padding: 30}} title=\"update contract name\" \n          onPress={()=> this.write()} /> */}\n      </View>\n    );\n  \n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    marginVertical: 8, \n    fontSize: 20, \n    fontWeight: 'bold'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}