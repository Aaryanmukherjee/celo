{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/raunakmukherjee/Documents/Raunak_main/UMich/BAM/box/client/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport \"./global\";\nimport { web3, kit } from \"./root\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { Home } from \"./components/Home\";\nimport { Market } from \"./components/Market\";\nimport { requestTxSig, waitForSignedTxs, requestAccountAddress, waitForAccountAuth, FeeCurrency } from '@celo/dappkit';\nimport { toTxResult } from \"@celo/connect\";\nimport * as Linking from 'expo-linking';\nimport HelloWorldContract from \"./contracts/HelloWorld.json\";\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream']);\nexport var App = function App() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      borrow = _useState2[0],\n      setBorrow = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      supply = _useState4[0],\n      setSupply = _useState4[1];\n\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: 'black',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    title: {\n      marginVertical: 8,\n      fontSize: 20,\n      fontWeight: 'bold'\n    }\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, React.createElement(Home, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), React.createElement(Market, {\n    label: \"Supply Markets\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/raunakmukherjee/Documents/Raunak_main/UMich/BAM/box/client/App.js"],"names":["React","useState","useEffect","web3","kit","Home","Market","requestTxSig","waitForSignedTxs","requestAccountAddress","waitForAccountAuth","FeeCurrency","toTxResult","Linking","HelloWorldContract","YellowBox","ignoreWarnings","App","borrow","setBorrow","supply","setSupply","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","title","marginVertical","fontSize","fontWeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA;AACA,SAASC,IAAT,EAAeC,GAAf;;;;;;;;AAEA,SAAQC,IAAR;AACA,SAAQC,MAAR;AAEA,SACEC,YADF,EAEEC,gBAFF,EAGEC,qBAHF,EAIEC,kBAJF,EAKEC,WALF,QAMO,eANP;AAOA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,OAAOC,kBAAP;AAGAC,SAAS,CAACC,cAAV,CAAyB,CAAC,mCAAD,EAAsC,yCAAtC,CAAzB;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AACvB,kBAA4BhB,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOiB,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA4BlB,QAAQ,CAAC,CAAD,CAApC;AAAA;AAAA,MAAOmB,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,CADG;AAETC,MAAAA,eAAe,EAAE,OAFR;AAGTC,MAAAA,UAAU,EAAE,QAHH;AAITC,MAAAA,cAAc,EAAE;AAJP,KADoB;AAO/BC,IAAAA,KAAK,EAAE;AACLC,MAAAA,cAAc,EAAE,CADX;AAELC,MAAAA,QAAQ,EAAE,EAFL;AAGLC,MAAAA,UAAU,EAAE;AAHP;AAPwB,GAAlB,CAAf;AAuIE,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACG,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAG,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAmCH,CA9KM","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nimport './global'\nimport { web3, kit } from './root'\nimport { Image, StyleSheet, Text, TextInput, Button, View, YellowBox } from 'react-native'\nimport {Home} from \"./components/Home\"\nimport {Market} from \"./components/Market\"\n\nimport {   \n  requestTxSig,\n  waitForSignedTxs,\n  requestAccountAddress,\n  waitForAccountAuth,\n  FeeCurrency\n} from '@celo/dappkit'\nimport { toTxResult } from \"@celo/connect\"\nimport * as Linking from 'expo-linking'\nimport HelloWorldContract from './contracts/HelloWorld.json'\n\n\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream'])\n\nexport const App = () => {\n  const [borrow, setBorrow] = useState(0)\n  const [supply, setSupply] = useState(0)\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: 'black',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    title: {\n      marginVertical: 8, \n      fontSize: 20, \n      fontWeight: 'bold'\n    }\n  });\n\n  \n\n\n\n  // Set the defaults for the state\n  // state = {\n  //   address: 'Not logged in',\n  //   phoneNumber: 'Not logged in',\n  //   cUSDBalance: 'Not logged in',\n  //   helloWorldContract: {},\n  //   contractName: '',\n  //   textInput: ''\n  // }\n\n  // // This function is called when the page successfully renders\n  // componentDidMount = async () => {\n    \n  //   // Check the Celo network ID\n  //   const networkId = await web3.eth.net.getId();\n    \n  //   // Get the deployed HelloWorld contract info for the appropriate network ID\n  //   const deployedNetwork = HelloWorldContract.networks[networkId];\n\n  //   // Create a new contract instance with the HelloWorld contract info\n  //   const instance = new web3.eth.Contract(\n  //     HelloWorldContract.abi,\n  //     deployedNetwork && deployedNetwork.address\n  //   );\n\n  //   // Save the contract instance\n  //   this.setState({ helloWorldContract: instance })\n  // }\n\n  // login = async () => {\n    \n  //   // A string you can pass to DAppKit, that you can use to listen to the response for that request\n  //   const requestId = 'login'\n    \n  //   // A string that will be displayed to the user, indicating the DApp requesting access/signature\n  //   const dappName = 'Hello Celo'\n    \n  //   // The deeplink that the Celo Wallet will use to redirect the user back to the DApp with the appropriate payload.\n  //   const callback = Linking.makeUrl('/my/path')\n  \n  //   // Ask the Celo Alfajores Wallet for user info\n  //   requestAccountAddress({\n  //     requestId,\n  //     dappName,\n  //     callback,\n  //   })\n  \n  //   // Wait for the Celo Wallet response\n  //   const dappkitResponse = await waitForAccountAuth(requestId)\n\n  //   // Set the default account to the account returned from the wallet\n  //   kit.defaultAccount = dappkitResponse.address\n\n  //   // Get the stabel token contract\n  //   const stableToken = await kit.contracts.getStableToken()\n\n  //   // Get the user account balance (cUSD)\n  //   const cUSDBalanceBig = await stableToken.balanceOf(kit.defaultAccount)\n    \n  //   // Convert from a big number to a string by rounding it to the appropriate number of decimal places\n  //   const ERC20_DECIMALS = 18\n  //   let cUSDBalanceDec = cUSDBalanceBig.shiftedBy(-ERC20_DECIMALS).toFixed(2)\n  //   let cUSDBalance = cUSDBalanceDec.toString()\n    \n  //   // Update state\n  //   this.setState({ cUSDBalance, \n  //                   isLoadingBalance: false,\n  //                   address: dappkitResponse.address, \n  //                   phoneNumber: dappkitResponse.phoneNumber })\n  // }\n\n  // read = async () => {\n    \n  //   // Read the name stored in the HelloWorld contract\n  //   let name = await this.state.helloWorldContract.methods.getName().call()\n    \n  //   // Update state\n  //   this.setState({ contractName: name })\n  // }\n\n  // write = async () => {\n  //   const requestId = 'update_name'\n  //   const dappName = 'Hello Celo'\n  //   const callback = Linking.makeUrl('/my/path')\n\n  //   // Create a transaction object to update the contract with the 'textInput'\n  //   const txObject = await this.state.helloWorldContract.methods.setName(this.state.textInput)\n\n  //   // Send a request to the Celo wallet to send an update transaction to the HelloWorld contract\n  //   requestTxSig(\n  //     kit,\n  //     [\n  //       {\n  //         from: this.state.address,\n  //         to: this.state.helloWorldContract.options.address,\n  //         tx: txObject,\n  //         feeCurrency: FeeCurrency.cUSD\n  //       }\n  //     ],\n  //     { requestId, dappName, callback }\n  //   )\n\n  //   // Get the response from the Celo wallet\n  //   const dappkitResponse = await waitForSignedTxs(requestId)\n  //   const tx = dappkitResponse.rawTxs[0]\n    \n  //   // Get the transaction result, once it has been included in the Celo blockchain\n  //   let result = await toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt()\n\n  //   console.log(`Hello World contract update transaction receipt: `, result)  \n  // }\n\n  // onChangeText = async (text) => {\n  //   this.setState({textInput: text})\n  // }\n\n  \n    return (\n      <View style={styles.container}>\n        <Home></Home>\n        <Market label = \"Supply Markets\"/>\n\n        {/* <Image resizeMode='contain' source={require(\"./assets/white-wallet-rings.png\")}></Image>\n        <Text>Open up client/App.js to start working on your app!</Text>\n        \n        <Text style={styles.title}>Login first</Text> */}\n        {/* <Button title=\"login()\" \n          onPress={()=> this.login()} />\n                <Text style={styles.title}>Account Info:</Text>\n        <Text>Current Account Address:</Text>\n        <Text>{this.state.address}</Text>\n        <Text>Phone number: {this.state.phoneNumber}</Text>\n        <Text>cUSD Balance: {this.state.cUSDBalance}</Text>\n\n        <Text style={styles.title}>Read HelloWorld</Text>\n        <Button title=\"Read Contract Name\" \n          onPress={()=> this.read()} />\n        <Text>Contract Name: {this.state.contractName}</Text>\n        \n        <Text style={styles.title}>Write to HelloWorld</Text>\n        <Text>New contract name:</Text>\n        <TextInput\n          style={{  borderColor: 'black', borderWidth: 1, backgroundColor: 'white' }}\n          placeholder=\"input new name here\"\n          onChangeText={text => this.onChangeText(text)}\n          value={this.state.textInput}\n          />\n        <Button style={{padding: 30}} title=\"update contract name\" \n          onPress={()=> this.write()} /> */}\n      </View>\n    );\n  \n}\n\n\n"]},"metadata":{},"sourceType":"module"}